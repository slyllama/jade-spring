[gd_resource type="Shader" format=3 uid="uid://b5a7c3uofthq4"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx, alpha_to_coverage, shadows_disabled;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;

uniform float distance_fade_min : hint_range(0.0, 4096.0, 0.01);
uniform float distance_fade_max : hint_range(0.0, 4096.0, 0.01);
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001);
uniform float alpha_antialiasing_edge : hint_range(0.0, 1.0, 0.01);

float get_wind(vec2 vertex, vec2 uv){
	float min_strength = 0.05;
	float max_strength = 0.01;
    float diff = pow(max_strength - min_strength, 2.0);
    float strength = clamp(min_strength + diff + sin(TIME / 3.5) * diff, min_strength, max_strength) * 0.7;
    float wind = (sin(TIME) + cos(TIME)) * strength * max(0.0, (1.0 - uv.y));
    return wind;
}

void vertex() {
	UV *= 0.95;
	vec4 pos = MODEL_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    VERTEX.x += get_wind(VERTEX.xy, UV);
}

vec3 screen(vec3 base, vec3 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}


void fragment() {
	vec4 albedo_tex = texture(texture_albedo, UV);
	//albedo_tex *= COLOR * 1.2;
	//ALBEDO = albedo_tex.rgb;
	ALBEDO = COLOR.rgb * 1.5 * pow(albedo_tex.rgb, vec3(0.9));

	ALPHA *= albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
	ALPHA_ANTIALIASING_EDGE = alpha_antialiasing_edge;
	BACKLIGHT = vec3(0.5);
	SPECULAR = 0.2;

	{
		// Distance Fade: Pixel Dither
		float fade_distance = length(VERTEX);
		// Use interleaved gradient noise, which is fast but still looks good.
		const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
		float fade = clamp(smoothstep(distance_fade_min, distance_fade_max, fade_distance), 0.0, 1.0);
		// Use a hard cap to prevent a few stray pixels from remaining when past the fade-out distance.
		if (fade < 0.001 || fade < fract(magic.z * fract(dot(FRAGCOORD.xy, magic.xy)))) {
			discard;
		}
	}
}
"
